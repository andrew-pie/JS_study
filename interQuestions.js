// - Какое	будет выведено значение: let x = 5; alert( x++	); ?

let x = 5; alert(x++);
//Не 6, а 5. Перед тем, как увеличить на 1 эта запись возвращает начальное значение 5, а потом добавит +1
let x = 5; alert(++x);
//А так показало бы 6. 



// - Чему	равно такое выражение: + false - null + true	?
console.log(typeof ([] + false));
// пустой массив == пустая строка. Строка + другий тип данных = строка. 
//'false'

console.log([] + false - null + true);
// "NaN"
[] + false - null + true
console.log([] + false - null + true);
// "NaN"



// - Что	выведет этот код: let y = 1; let x = y = 2; alert(x);	?

let y = 1;
let x = y = 2;
alert(x);
//2. Справа на лево идет присваивание значение


// - Чему	равна сумма + 1 + 2?
console.log([] + 1 + 2);
//12. Как строка



// - Что	выведет этот код: alert( "1"[0] )?
alert("1"[0]);
//1. 0 индекс строки == 1;


// - Чему	равно 2 && 1 && null && 0 &&	undefined ?
console.log(2 && 1 && null && 0 && undefined);
// Оператор и всегда запинается на лжи. Он останавливает работу на этом. Null - false. Выведет его
// Или всегда останавливает работу на первой правде

// - Есть	ли разница между выражениями? !!( a &&	b ) и (a && b)?
console.log(!!(1 && 2) === (1 && 2));
//!! превращают выражение в булиновое. 
//Выведет не правду


// - Что	выведет этот код: alert( null || 2 && 3 || 4	); ?
alert(null || 2 && 3 || 4);
//Смотреть в таблицу приоритетов операторов
//И выше приоритет чем или
//3



// - a	= [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?
const a = [1, 2, 3];
const b = [1, 2, 3];
//a !=b. Это 2 различные ящика с информацией. Эти ящики уже другие. Значит они не равны.


// - Что	выведет этот код: alert( +"Infinity" ); ?
alert(+"Infinity");
//insfinity. Тип данных число, так как стоит + - переобразование в число


// - Верно	ли сравнение: "Ёжик" > "яблоко"?
console.log("Ёжик" > "яблоко");
//Строки сравниваются посимвольно. я последняя буква, она дальше Ё, значит будет неправда.


// - Чему	равно 0 || "" || 2 || undefined || true || falsе ?
console.log(0 || "" || 2 || undefined || true || falsе );
//или запинается на правде
// 2 первая правда, на нем остановится
